{"ast":null,"code":"var _jsxFileName = \"/Users/irenemanas/Desktop/ADALAB/ejercicios-de-adalab/modulo-3-leccion-10-ejercicio-1/src/components/Counter.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0\n    };\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n\n  componentDidMount() {\n    // guardamos el identificador del interval para limpiarlo en componentWillUnmount\n    this.intervalId = setInterval(this.incrementCounter, 1000); // NOTA: guardamos el identificador en un atributo de la clase y\n    // no en el estado ya que no queremos pintar el identificador en el DOM\n\n    console.log(\"Se está ejecuntando el método componentDidMount\");\n  }\n\n  componentWillUnmount() {\n    // limpiamos el interval\n    clearInterval(this.intervalId);\n    console.log(\"Se está ejecuntando el método componentWillUnmount\");\n  }\n\n  incrementCounter() {\n    this.setState(prevState => {\n      return {\n        counter: prevState.counter + 1\n      };\n    });\n    console.log(\"Se está ejecuntando el método incrementCounter\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Contador: \", this.state.counter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/irenemanas/Desktop/ADALAB/ejercicios-de-adalab/modulo-3-leccion-10-ejercicio-1/src/components/Counter.js"],"names":["React","Counter","Component","constructor","props","state","counter","incrementCounter","bind","componentDidMount","intervalId","setInterval","console","log","componentWillUnmount","clearInterval","setState","prevState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKC,UAAL,GAAkBC,WAAW,CAAC,KAAKJ,gBAAN,EAAwB,IAAxB,CAA7B,CAFkB,CAGlB;AACA;;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AACD;;AACDC,EAAAA,oBAAoB,GAAG;AACrB;AACAC,IAAAA,aAAa,CAAC,KAAKL,UAAN,CAAb;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACD;;AACDN,EAAAA,gBAAgB,GAAG;AACjB,SAAKS,QAAL,CAAeC,SAAD,IAAe;AAC3B,aAAO;AAAEX,QAAAA,OAAO,EAAEW,SAAS,CAACX,OAAV,GAAoB;AAA/B,OAAP;AACD,KAFD;AAGAM,IAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACD;;AACDK,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA,+BAAgB,KAAKb,KAAL,CAAWC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA5BmC;;AA8BtC,eAAeL,OAAf","sourcesContent":["import React from \"react\";\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n    };\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n  componentDidMount() {\n    // guardamos el identificador del interval para limpiarlo en componentWillUnmount\n    this.intervalId = setInterval(this.incrementCounter, 1000);\n    // NOTA: guardamos el identificador en un atributo de la clase y\n    // no en el estado ya que no queremos pintar el identificador en el DOM\n    console.log(\"Se está ejecuntando el método componentDidMount\");\n  }\n  componentWillUnmount() {\n    // limpiamos el interval\n    clearInterval(this.intervalId);\n    console.log(\"Se está ejecuntando el método componentWillUnmount\");\n  }\n  incrementCounter() {\n    this.setState((prevState) => {\n      return { counter: prevState.counter + 1 };\n    });\n    console.log(\"Se está ejecuntando el método incrementCounter\");\n  }\n  render() {\n    return <div>Contador: {this.state.counter}</div>;\n  }\n}\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}